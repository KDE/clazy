/****************************************************************************
** Meta object code from reading C++ file 'main.cpp'
**
** Created by: The Qt Meta Object Compiler version 69 (Qt 6.9.0)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qmetatype.h>

#include <QtCore/qtmochelpers.h>

#include <memory>


#include <QtCore/qxptype_traits.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'main.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 69
#error "This file was generated using the moc from 6.9.0. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

#ifndef Q_CONSTINIT
#define Q_CONSTINIT
#endif

QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
QT_WARNING_DISABLE_GCC("-Wuseless-cast")
namespace {
struct qt_meta_tag_ZN5MyObjE_t {};
} // unnamed namespace

template <> constexpr inline auto MyObj::qt_create_metaobjectdata<qt_meta_tag_ZN5MyObjE_t>()
{
    namespace QMC = QtMocConstants;
    QtMocHelpers::StringRefStorage qt_stringData {
        "MyObj",
        "signal1",
        "",
        "slot1",
        "slot2",
        "slotWithArg",
        "i"
    };

    QtMocHelpers::UintData qt_methods {
        // Signal 'signal1'
        QtMocHelpers::SignalData<void()>(1, 2, QMC::AccessPublic, QMetaType::Void),
        // Slot 'slot1'
        QtMocHelpers::SlotData<void()>(3, 2, QMC::AccessPublic, QMetaType::Void),
        // Slot 'slot2'
        QtMocHelpers::SlotData<void()>(4, 2, QMC::AccessPublic, QMetaType::Void),
        // Slot 'slotWithArg'
        QtMocHelpers::SlotData<void(int)>(5, 2, QMC::AccessPublic, QMetaType::Void, {{
            { QMetaType::Int, 6 },
        }}),
        // Slot 'slotWithArg'
        QtMocHelpers::SlotData<void()>(5, 2, QMC::AccessPublic | QMC::MethodCloned, QMetaType::Void),
    };
    QtMocHelpers::UintData qt_properties {
    };
    QtMocHelpers::UintData qt_enums {
    };
    return QtMocHelpers::metaObjectData<MyObj, qt_meta_tag_ZN5MyObjE_t>(QMC::MetaObjectFlag{}, qt_stringData,
            qt_methods, qt_properties, qt_enums);
}
Q_CONSTINIT const QMetaObject MyObj::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_staticMetaObjectStaticContent<qt_meta_tag_ZN5MyObjE_t>.stringdata,
    qt_staticMetaObjectStaticContent<qt_meta_tag_ZN5MyObjE_t>.data,
    qt_static_metacall,
    nullptr,
    qt_staticMetaObjectRelocatingContent<qt_meta_tag_ZN5MyObjE_t>.metaTypes,
    nullptr
} };

void MyObj::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    auto *_t = static_cast<MyObj *>(_o);
    if (_c == QMetaObject::InvokeMetaMethod) {
        switch (_id) {
        case 0: _t->signal1(); break;
        case 1: _t->slot1(); break;
        case 2: _t->slot2(); break;
        case 3: _t->slotWithArg((*reinterpret_cast< std::add_pointer_t<int>>(_a[1]))); break;
        case 4: _t->slotWithArg(); break;
        default: ;
        }
    }
    if (_c == QMetaObject::IndexOfMethod) {
        if (QtMocHelpers::indexOfMethod<void (MyObj::*)()>(_a, &MyObj::signal1, 0))
            return;
    }
}

const QMetaObject *MyObj::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *MyObj::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_staticMetaObjectStaticContent<qt_meta_tag_ZN5MyObjE_t>.strings))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int MyObj::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 5)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 5;
    }
    if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 5)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 5;
    }
    return _id;
}

// SIGNAL 0
void MyObj::signal1()
{
    QMetaObject::activate(this, &staticMetaObject, 0, nullptr);
}
namespace {
struct qt_meta_tag_ZN12MyObjDerivedE_t {};
} // unnamed namespace

template <> constexpr inline auto MyObjDerived::qt_create_metaobjectdata<qt_meta_tag_ZN12MyObjDerivedE_t>()
{
    namespace QMC = QtMocConstants;
    QtMocHelpers::StringRefStorage qt_stringData {
        "MyObjDerived"
    };

    QtMocHelpers::UintData qt_methods {
    };
    QtMocHelpers::UintData qt_properties {
    };
    QtMocHelpers::UintData qt_enums {
    };
    return QtMocHelpers::metaObjectData<MyObjDerived, qt_meta_tag_ZN12MyObjDerivedE_t>(QMC::MetaObjectFlag{}, qt_stringData,
            qt_methods, qt_properties, qt_enums);
}
Q_CONSTINIT const QMetaObject MyObjDerived::staticMetaObject = { {
    QMetaObject::SuperData::link<MyObj::staticMetaObject>(),
    qt_staticMetaObjectStaticContent<qt_meta_tag_ZN12MyObjDerivedE_t>.stringdata,
    qt_staticMetaObjectStaticContent<qt_meta_tag_ZN12MyObjDerivedE_t>.data,
    qt_static_metacall,
    nullptr,
    qt_staticMetaObjectRelocatingContent<qt_meta_tag_ZN12MyObjDerivedE_t>.metaTypes,
    nullptr
} };

void MyObjDerived::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    auto *_t = static_cast<MyObjDerived *>(_o);
    (void)_t;
    (void)_c;
    (void)_id;
    (void)_a;
}

const QMetaObject *MyObjDerived::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *MyObjDerived::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_staticMetaObjectStaticContent<qt_meta_tag_ZN12MyObjDerivedE_t>.strings))
        return static_cast<void*>(this);
    return MyObj::qt_metacast(_clname);
}

int MyObjDerived::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = MyObj::qt_metacall(_c, _id, _a);
    return _id;
}
namespace {
struct qt_meta_tag_ZN8OtherObjE_t {};
} // unnamed namespace

template <> constexpr inline auto OtherObj::qt_create_metaobjectdata<qt_meta_tag_ZN8OtherObjE_t>()
{
    namespace QMC = QtMocConstants;
    QtMocHelpers::StringRefStorage qt_stringData {
        "OtherObj",
        "otherSlot",
        "",
        "otherSlotArg"
    };

    QtMocHelpers::UintData qt_methods {
        // Slot 'otherSlot'
        QtMocHelpers::SlotData<void()>(1, 2, QMC::AccessPublic, QMetaType::Void),
        // Slot 'otherSlotArg'
        QtMocHelpers::SlotData<void(bool)>(3, 2, QMC::AccessPublic, QMetaType::Void, {{
            { QMetaType::Bool, 2 },
        }}),
    };
    QtMocHelpers::UintData qt_properties {
    };
    QtMocHelpers::UintData qt_enums {
    };
    return QtMocHelpers::metaObjectData<OtherObj, qt_meta_tag_ZN8OtherObjE_t>(QMC::MetaObjectFlag{}, qt_stringData,
            qt_methods, qt_properties, qt_enums);
}
Q_CONSTINIT const QMetaObject OtherObj::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_staticMetaObjectStaticContent<qt_meta_tag_ZN8OtherObjE_t>.stringdata,
    qt_staticMetaObjectStaticContent<qt_meta_tag_ZN8OtherObjE_t>.data,
    qt_static_metacall,
    nullptr,
    qt_staticMetaObjectRelocatingContent<qt_meta_tag_ZN8OtherObjE_t>.metaTypes,
    nullptr
} };

void OtherObj::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    auto *_t = static_cast<OtherObj *>(_o);
    if (_c == QMetaObject::InvokeMetaMethod) {
        switch (_id) {
        case 0: _t->otherSlot(); break;
        case 1: _t->otherSlotArg((*reinterpret_cast< std::add_pointer_t<bool>>(_a[1]))); break;
        default: ;
        }
    }
}

const QMetaObject *OtherObj::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *OtherObj::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_staticMetaObjectStaticContent<qt_meta_tag_ZN8OtherObjE_t>.strings))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int OtherObj::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 2)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 2;
    }
    if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 2)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 2;
    }
    return _id;
}
namespace {
struct qt_meta_tag_ZN11WithNestingE_t {};
} // unnamed namespace

template <> constexpr inline auto WithNesting::qt_create_metaobjectdata<qt_meta_tag_ZN11WithNestingE_t>()
{
    namespace QMC = QtMocConstants;
    QtMocHelpers::StringRefStorage qt_stringData {
        "WithNesting",
        "signal1",
        "",
        "slot1",
        "privSlot"
    };

    QtMocHelpers::UintData qt_methods {
        // Signal 'signal1'
        QtMocHelpers::SignalData<void()>(1, 2, QMC::AccessPublic, QMetaType::Void),
        // Slot 'slot1'
        QtMocHelpers::SlotData<void()>(3, 2, QMC::AccessPublic, QMetaType::Void),
        // Slot 'privSlot'
        QtMocHelpers::SlotData<void()>(4, 2, QMC::AccessPrivate, QMetaType::Void),
    };
    QtMocHelpers::UintData qt_properties {
    };
    QtMocHelpers::UintData qt_enums {
    };
    return QtMocHelpers::metaObjectData<WithNesting, qt_meta_tag_ZN11WithNestingE_t>(QMC::MetaObjectFlag{}, qt_stringData,
            qt_methods, qt_properties, qt_enums);
}
Q_CONSTINIT const QMetaObject WithNesting::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_staticMetaObjectStaticContent<qt_meta_tag_ZN11WithNestingE_t>.stringdata,
    qt_staticMetaObjectStaticContent<qt_meta_tag_ZN11WithNestingE_t>.data,
    qt_static_metacall,
    nullptr,
    qt_staticMetaObjectRelocatingContent<qt_meta_tag_ZN11WithNestingE_t>.metaTypes,
    nullptr
} };

void WithNesting::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    auto *_t = static_cast<WithNesting *>(_o);
    if (_c == QMetaObject::InvokeMetaMethod) {
        switch (_id) {
        case 0: _t->signal1(); break;
        case 1: _t->slot1(); break;
        case 2: _t->privSlot(); break;
        default: ;
        }
    }
    if (_c == QMetaObject::IndexOfMethod) {
        if (QtMocHelpers::indexOfMethod<void (WithNesting::*)()>(_a, &WithNesting::signal1, 0))
            return;
    }
}

const QMetaObject *WithNesting::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *WithNesting::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_staticMetaObjectStaticContent<qt_meta_tag_ZN11WithNestingE_t>.strings))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int WithNesting::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 3)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 3;
    }
    if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 3)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 3;
    }
    return _id;
}

// SIGNAL 0
void WithNesting::signal1()
{
    QMetaObject::activate(this, &staticMetaObject, 0, nullptr);
}
namespace {
struct qt_meta_tag_ZN11WithNesting7PrivateE_t {};
} // unnamed namespace

template <> constexpr inline auto WithNesting::Private::qt_create_metaobjectdata<qt_meta_tag_ZN11WithNesting7PrivateE_t>()
{
    namespace QMC = QtMocConstants;
    QtMocHelpers::StringRefStorage qt_stringData {
        "WithNesting::Private",
        "signal1",
        "",
        "pSlot1"
    };

    QtMocHelpers::UintData qt_methods {
        // Signal 'signal1'
        QtMocHelpers::SignalData<void()>(1, 2, QMC::AccessPublic, QMetaType::Void),
        // Slot 'pSlot1'
        QtMocHelpers::SlotData<void()>(3, 2, QMC::AccessPublic, QMetaType::Void),
    };
    QtMocHelpers::UintData qt_properties {
    };
    QtMocHelpers::UintData qt_enums {
    };
    return QtMocHelpers::metaObjectData<Private, qt_meta_tag_ZN11WithNesting7PrivateE_t>(QMC::MetaObjectFlag{}, qt_stringData,
            qt_methods, qt_properties, qt_enums);
}
Q_CONSTINIT const QMetaObject WithNesting::Private::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_staticMetaObjectStaticContent<qt_meta_tag_ZN11WithNesting7PrivateE_t>.stringdata,
    qt_staticMetaObjectStaticContent<qt_meta_tag_ZN11WithNesting7PrivateE_t>.data,
    qt_static_metacall,
    nullptr,
    qt_staticMetaObjectRelocatingContent<qt_meta_tag_ZN11WithNesting7PrivateE_t>.metaTypes,
    nullptr
} };

void WithNesting::Private::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    auto *_t = static_cast<Private *>(_o);
    if (_c == QMetaObject::InvokeMetaMethod) {
        switch (_id) {
        case 0: _t->signal1(); break;
        case 1: _t->pSlot1(); break;
        default: ;
        }
    }
    if (_c == QMetaObject::IndexOfMethod) {
        if (QtMocHelpers::indexOfMethod<void (Private::*)()>(_a, &Private::signal1, 0))
            return;
    }
}

const QMetaObject *WithNesting::Private::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *WithNesting::Private::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_staticMetaObjectStaticContent<qt_meta_tag_ZN11WithNesting7PrivateE_t>.strings))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int WithNesting::Private::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 2)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 2;
    }
    if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 2)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 2;
    }
    return _id;
}

// SIGNAL 0
void WithNesting::Private::signal1()
{
    QMetaObject::activate(this, &staticMetaObject, 0, nullptr);
}
namespace {
struct qt_meta_tag_ZN21TestingArgumentCountsE_t {};
} // unnamed namespace

template <> constexpr inline auto TestingArgumentCounts::qt_create_metaobjectdata<qt_meta_tag_ZN21TestingArgumentCountsE_t>()
{
    namespace QMC = QtMocConstants;
    QtMocHelpers::StringRefStorage qt_stringData {
        "TestingArgumentCounts",
        "si0",
        "",
        "si1",
        "si2",
        "si3",
        "sl0",
        "sl1",
        "sl2"
    };

    QtMocHelpers::UintData qt_methods {
        // Signal 'si0'
        QtMocHelpers::SignalData<void()>(1, 2, QMC::AccessPublic, QMetaType::Void),
        // Signal 'si1'
        QtMocHelpers::SignalData<void(QString)>(3, 2, QMC::AccessPublic, QMetaType::Void, {{
            { QMetaType::QString, 2 },
        }}),
        // Signal 'si2'
        QtMocHelpers::SignalData<void(QString, QString)>(4, 2, QMC::AccessPublic, QMetaType::Void, {{
            { QMetaType::QString, 2 }, { QMetaType::QString, 2 },
        }}),
        // Signal 'si3'
        QtMocHelpers::SignalData<void(QString, QString, QString)>(5, 2, QMC::AccessPublic, QMetaType::Void, {{
            { QMetaType::QString, 2 }, { QMetaType::QString, 2 }, { QMetaType::QString, 2 },
        }}),
        // Slot 'sl0'
        QtMocHelpers::SlotData<void()>(6, 2, QMC::AccessPublic, QMetaType::Void),
        // Slot 'sl1'
        QtMocHelpers::SlotData<void(QString)>(7, 2, QMC::AccessPublic, QMetaType::Void, {{
            { QMetaType::QString, 2 },
        }}),
        // Slot 'sl2'
        QtMocHelpers::SlotData<void(QString, QString, QString)>(8, 2, QMC::AccessPublic, QMetaType::Void, {{
            { QMetaType::QString, 2 }, { QMetaType::QString, 2 }, { QMetaType::QString, 2 },
        }}),
        // Slot 'sl2'
        QtMocHelpers::SlotData<void(QString, QString)>(8, 2, QMC::AccessPublic | QMC::MethodCloned, QMetaType::Void, {{
            { QMetaType::QString, 2 }, { QMetaType::QString, 2 },
        }}),
    };
    QtMocHelpers::UintData qt_properties {
    };
    QtMocHelpers::UintData qt_enums {
    };
    return QtMocHelpers::metaObjectData<TestingArgumentCounts, qt_meta_tag_ZN21TestingArgumentCountsE_t>(QMC::MetaObjectFlag{}, qt_stringData,
            qt_methods, qt_properties, qt_enums);
}
Q_CONSTINIT const QMetaObject TestingArgumentCounts::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_staticMetaObjectStaticContent<qt_meta_tag_ZN21TestingArgumentCountsE_t>.stringdata,
    qt_staticMetaObjectStaticContent<qt_meta_tag_ZN21TestingArgumentCountsE_t>.data,
    qt_static_metacall,
    nullptr,
    qt_staticMetaObjectRelocatingContent<qt_meta_tag_ZN21TestingArgumentCountsE_t>.metaTypes,
    nullptr
} };

void TestingArgumentCounts::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    auto *_t = static_cast<TestingArgumentCounts *>(_o);
    if (_c == QMetaObject::InvokeMetaMethod) {
        switch (_id) {
        case 0: _t->si0(); break;
        case 1: _t->si1((*reinterpret_cast< std::add_pointer_t<QString>>(_a[1]))); break;
        case 2: _t->si2((*reinterpret_cast< std::add_pointer_t<QString>>(_a[1])),(*reinterpret_cast< std::add_pointer_t<QString>>(_a[2]))); break;
        case 3: _t->si3((*reinterpret_cast< std::add_pointer_t<QString>>(_a[1])),(*reinterpret_cast< std::add_pointer_t<QString>>(_a[2])),(*reinterpret_cast< std::add_pointer_t<QString>>(_a[3]))); break;
        case 4: _t->sl0(); break;
        case 5: _t->sl1((*reinterpret_cast< std::add_pointer_t<QString>>(_a[1]))); break;
        case 6: _t->sl2((*reinterpret_cast< std::add_pointer_t<QString>>(_a[1])),(*reinterpret_cast< std::add_pointer_t<QString>>(_a[2])),(*reinterpret_cast< std::add_pointer_t<QString>>(_a[3]))); break;
        case 7: _t->sl2((*reinterpret_cast< std::add_pointer_t<QString>>(_a[1])),(*reinterpret_cast< std::add_pointer_t<QString>>(_a[2]))); break;
        default: ;
        }
    }
    if (_c == QMetaObject::IndexOfMethod) {
        if (QtMocHelpers::indexOfMethod<void (TestingArgumentCounts::*)()>(_a, &TestingArgumentCounts::si0, 0))
            return;
        if (QtMocHelpers::indexOfMethod<void (TestingArgumentCounts::*)(QString )>(_a, &TestingArgumentCounts::si1, 1))
            return;
        if (QtMocHelpers::indexOfMethod<void (TestingArgumentCounts::*)(QString , QString )>(_a, &TestingArgumentCounts::si2, 2))
            return;
        if (QtMocHelpers::indexOfMethod<void (TestingArgumentCounts::*)(QString , QString , QString )>(_a, &TestingArgumentCounts::si3, 3))
            return;
    }
}

const QMetaObject *TestingArgumentCounts::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TestingArgumentCounts::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_staticMetaObjectStaticContent<qt_meta_tag_ZN21TestingArgumentCountsE_t>.strings))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int TestingArgumentCounts::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 8)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 8;
    }
    if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 8)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 8;
    }
    return _id;
}

// SIGNAL 0
void TestingArgumentCounts::si0()
{
    QMetaObject::activate(this, &staticMetaObject, 0, nullptr);
}

// SIGNAL 1
void TestingArgumentCounts::si1(QString _t1)
{
    QMetaObject::activate<void>(this, &staticMetaObject, 1, nullptr, _t1);
}

// SIGNAL 2
void TestingArgumentCounts::si2(QString _t1, QString _t2)
{
    QMetaObject::activate<void>(this, &staticMetaObject, 2, nullptr, _t1, _t2);
}

// SIGNAL 3
void TestingArgumentCounts::si3(QString _t1, QString _t2, QString _t3)
{
    QMetaObject::activate<void>(this, &staticMetaObject, 3, nullptr, _t1, _t2, _t3);
}
namespace {
struct qt_meta_tag_ZN16TestingProtectedE_t {};
} // unnamed namespace

template <> constexpr inline auto TestingProtected::qt_create_metaobjectdata<qt_meta_tag_ZN16TestingProtectedE_t>()
{
    namespace QMC = QtMocConstants;
    QtMocHelpers::StringRefStorage qt_stringData {
        "TestingProtected"
    };

    QtMocHelpers::UintData qt_methods {
    };
    QtMocHelpers::UintData qt_properties {
    };
    QtMocHelpers::UintData qt_enums {
    };
    return QtMocHelpers::metaObjectData<TestingProtected, qt_meta_tag_ZN16TestingProtectedE_t>(QMC::MetaObjectFlag{}, qt_stringData,
            qt_methods, qt_properties, qt_enums);
}
Q_CONSTINIT const QMetaObject TestingProtected::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_staticMetaObjectStaticContent<qt_meta_tag_ZN16TestingProtectedE_t>.stringdata,
    qt_staticMetaObjectStaticContent<qt_meta_tag_ZN16TestingProtectedE_t>.data,
    qt_static_metacall,
    nullptr,
    qt_staticMetaObjectRelocatingContent<qt_meta_tag_ZN16TestingProtectedE_t>.metaTypes,
    nullptr
} };

void TestingProtected::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    auto *_t = static_cast<TestingProtected *>(_o);
    (void)_t;
    (void)_c;
    (void)_id;
    (void)_a;
}

const QMetaObject *TestingProtected::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TestingProtected::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_staticMetaObjectStaticContent<qt_meta_tag_ZN16TestingProtectedE_t>.strings))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int TestingProtected::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    return _id;
}
namespace {
struct qt_meta_tag_ZN9TestTypesE_t {};
} // unnamed namespace

template <> constexpr inline auto TestTypes::qt_create_metaobjectdata<qt_meta_tag_ZN9TestTypesE_t>()
{
    namespace QMC = QtMocConstants;
    QtMocHelpers::StringRefStorage qt_stringData {
        "TestTypes",
        "s1",
        "",
        "s2",
        "s3",
        "int*",
        "s4",
        "bool*",
        "s5",
        "float*",
        "s6",
        "s7",
        "s8",
        "char*",
        "s9",
        "s10",
        "s11",
        "S1",
        "s12",
        "S2",
        "s13",
        "S3",
        "s14",
        "S1a",
        "s15",
        "S1*",
        "s16",
        "S2*",
        "s17",
        "S3*",
        "s18",
        "S1a*",
        "s19",
        "S1&",
        "s20",
        "S2&",
        "s21",
        "S3&",
        "s22",
        "S1a&",
        "s23",
        "s24",
        "s25",
        "s26",
        "s27",
        "const S1*",
        "s28",
        "const S2*",
        "s29",
        "const S3*",
        "s30",
        "const S1a*",
        "s31",
        "s32",
        "doubleClicked",
        "QModelIndex",
        "triggered",
        "yes"
    };

    QtMocHelpers::UintData qt_methods {
        // Signal 's1'
        QtMocHelpers::SignalData<void(bool)>(1, 2, QMC::AccessPublic, QMetaType::Void, {{
            { QMetaType::Bool, 2 },
        }}),
        // Signal 's2'
        QtMocHelpers::SignalData<void(int)>(3, 2, QMC::AccessPublic, QMetaType::Void, {{
            { QMetaType::Int, 2 },
        }}),
        // Signal 's3'
        QtMocHelpers::SignalData<void(int *)>(4, 2, QMC::AccessPublic, QMetaType::Void, {{
            { 0x80000000 | 5, 2 },
        }}),
        // Signal 's4'
        QtMocHelpers::SignalData<void(bool *)>(6, 2, QMC::AccessPublic, QMetaType::Void, {{
            { 0x80000000 | 7, 2 },
        }}),
        // Signal 's5'
        QtMocHelpers::SignalData<void(float *)>(8, 2, QMC::AccessPublic, QMetaType::Void, {{
            { 0x80000000 | 9, 2 },
        }}),
        // Signal 's6'
        QtMocHelpers::SignalData<void(float *)>(10, 2, QMC::AccessPublic, QMetaType::Void, {{
            { 0x80000000 | 9, 2 },
        }}),
        // Signal 's7'
        QtMocHelpers::SignalData<void(char)>(11, 2, QMC::AccessPublic, QMetaType::Void, {{
            { QMetaType::Char, 2 },
        }}),
        // Signal 's8'
        QtMocHelpers::SignalData<void(char *)>(12, 2, QMC::AccessPublic, QMetaType::Void, {{
            { 0x80000000 | 13, 2 },
        }}),
        // Signal 's9'
        QtMocHelpers::SignalData<void(float)>(14, 2, QMC::AccessPublic, QMetaType::Void, {{
            { QMetaType::Float, 2 },
        }}),
        // Signal 's10'
        QtMocHelpers::SignalData<void(double)>(15, 2, QMC::AccessPublic, QMetaType::Void, {{
            { QMetaType::Double, 2 },
        }}),
        // Signal 's11'
        QtMocHelpers::SignalData<void(S1)>(16, 2, QMC::AccessPublic, QMetaType::Void, {{
            { 0x80000000 | 17, 2 },
        }}),
        // Signal 's12'
        QtMocHelpers::SignalData<void(S2)>(18, 2, QMC::AccessPublic, QMetaType::Void, {{
            { 0x80000000 | 19, 2 },
        }}),
        // Signal 's13'
        QtMocHelpers::SignalData<void(S3)>(20, 2, QMC::AccessPublic, QMetaType::Void, {{
            { 0x80000000 | 21, 2 },
        }}),
        // Signal 's14'
        QtMocHelpers::SignalData<void(S1a)>(22, 2, QMC::AccessPublic, QMetaType::Void, {{
            { 0x80000000 | 23, 2 },
        }}),
        // Signal 's15'
        QtMocHelpers::SignalData<void(S1 *)>(24, 2, QMC::AccessPublic, QMetaType::Void, {{
            { 0x80000000 | 25, 2 },
        }}),
        // Signal 's16'
        QtMocHelpers::SignalData<void(S2 *)>(26, 2, QMC::AccessPublic, QMetaType::Void, {{
            { 0x80000000 | 27, 2 },
        }}),
        // Signal 's17'
        QtMocHelpers::SignalData<void(S3 *)>(28, 2, QMC::AccessPublic, QMetaType::Void, {{
            { 0x80000000 | 29, 2 },
        }}),
        // Signal 's18'
        QtMocHelpers::SignalData<void(S1a *)>(30, 2, QMC::AccessPublic, QMetaType::Void, {{
            { 0x80000000 | 31, 2 },
        }}),
        // Signal 's19'
        QtMocHelpers::SignalData<void(S1 &)>(32, 2, QMC::AccessPublic, QMetaType::Void, {{
            { 0x80000000 | 33, 2 },
        }}),
        // Signal 's20'
        QtMocHelpers::SignalData<void(S2 &)>(34, 2, QMC::AccessPublic, QMetaType::Void, {{
            { 0x80000000 | 35, 2 },
        }}),
        // Signal 's21'
        QtMocHelpers::SignalData<void(S3 &)>(36, 2, QMC::AccessPublic, QMetaType::Void, {{
            { 0x80000000 | 37, 2 },
        }}),
        // Signal 's22'
        QtMocHelpers::SignalData<void(S1a &)>(38, 2, QMC::AccessPublic, QMetaType::Void, {{
            { 0x80000000 | 39, 2 },
        }}),
        // Signal 's23'
        QtMocHelpers::SignalData<void(const S1)>(40, 2, QMC::AccessPublic, QMetaType::Void, {{
            { 0x80000000 | 17, 2 },
        }}),
        // Signal 's24'
        QtMocHelpers::SignalData<void(const S2)>(41, 2, QMC::AccessPublic, QMetaType::Void, {{
            { 0x80000000 | 19, 2 },
        }}),
        // Signal 's25'
        QtMocHelpers::SignalData<void(const S3)>(42, 2, QMC::AccessPublic, QMetaType::Void, {{
            { 0x80000000 | 21, 2 },
        }}),
        // Signal 's26'
        QtMocHelpers::SignalData<void(const S1a)>(43, 2, QMC::AccessPublic, QMetaType::Void, {{
            { 0x80000000 | 23, 2 },
        }}),
        // Signal 's27'
        QtMocHelpers::SignalData<void(const S1 *)>(44, 2, QMC::AccessPublic, QMetaType::Void, {{
            { 0x80000000 | 45, 2 },
        }}),
        // Signal 's28'
        QtMocHelpers::SignalData<void(const S2 *)>(46, 2, QMC::AccessPublic, QMetaType::Void, {{
            { 0x80000000 | 47, 2 },
        }}),
        // Signal 's29'
        QtMocHelpers::SignalData<void(const S3 *)>(48, 2, QMC::AccessPublic, QMetaType::Void, {{
            { 0x80000000 | 49, 2 },
        }}),
        // Signal 's30'
        QtMocHelpers::SignalData<void(const S1a *)>(50, 2, QMC::AccessPublic, QMetaType::Void, {{
            { 0x80000000 | 51, 2 },
        }}),
        // Signal 's31'
        QtMocHelpers::SignalData<void(const S1 &)>(52, 2, QMC::AccessPublic, QMetaType::Void, {{
            { 0x80000000 | 17, 2 },
        }}),
        // Signal 's32'
        QtMocHelpers::SignalData<void(S1 &)>(53, 2, QMC::AccessPublic, QMetaType::Void, {{
            { 0x80000000 | 33, 2 },
        }}),
        // Signal 'doubleClicked'
        QtMocHelpers::SignalData<void(const QModelIndex &)>(54, 2, QMC::AccessPublic, QMetaType::Void, {{
            { 0x80000000 | 55, 2 },
        }}),
        // Signal 'triggered'
        QtMocHelpers::SignalData<void(bool)>(56, 2, QMC::AccessPublic, QMetaType::Void, {{
            { QMetaType::Bool, 57 },
        }}),
        // Signal 'triggered'
        QtMocHelpers::SignalData<void()>(56, 2, QMC::AccessPublic | QMC::MethodCloned, QMetaType::Void),
    };
    QtMocHelpers::UintData qt_properties {
    };
    QtMocHelpers::UintData qt_enums {
    };
    return QtMocHelpers::metaObjectData<TestTypes, qt_meta_tag_ZN9TestTypesE_t>(QMC::MetaObjectFlag{}, qt_stringData,
            qt_methods, qt_properties, qt_enums);
}
Q_CONSTINIT const QMetaObject TestTypes::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_staticMetaObjectStaticContent<qt_meta_tag_ZN9TestTypesE_t>.stringdata,
    qt_staticMetaObjectStaticContent<qt_meta_tag_ZN9TestTypesE_t>.data,
    qt_static_metacall,
    nullptr,
    qt_staticMetaObjectRelocatingContent<qt_meta_tag_ZN9TestTypesE_t>.metaTypes,
    nullptr
} };

void TestTypes::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    auto *_t = static_cast<TestTypes *>(_o);
    if (_c == QMetaObject::InvokeMetaMethod) {
        switch (_id) {
        case 0: _t->s1((*reinterpret_cast< std::add_pointer_t<bool>>(_a[1]))); break;
        case 1: _t->s2((*reinterpret_cast< std::add_pointer_t<int>>(_a[1]))); break;
        case 2: _t->s3((*reinterpret_cast< std::add_pointer_t<int*>>(_a[1]))); break;
        case 3: _t->s4((*reinterpret_cast< std::add_pointer_t<bool*>>(_a[1]))); break;
        case 4: _t->s5((*reinterpret_cast< std::add_pointer_t<float*>>(_a[1]))); break;
        case 5: _t->s6((*reinterpret_cast< std::add_pointer_t<float*>>(_a[1]))); break;
        case 6: _t->s7((*reinterpret_cast< std::add_pointer_t<char>>(_a[1]))); break;
        case 7: _t->s8((*reinterpret_cast< std::add_pointer_t<char*>>(_a[1]))); break;
        case 8: _t->s9((*reinterpret_cast< std::add_pointer_t<float>>(_a[1]))); break;
        case 9: _t->s10((*reinterpret_cast< std::add_pointer_t<double>>(_a[1]))); break;
        case 10: _t->s11((*reinterpret_cast< std::add_pointer_t<S1>>(_a[1]))); break;
        case 11: _t->s12((*reinterpret_cast< std::add_pointer_t<S2>>(_a[1]))); break;
        case 12: _t->s13((*reinterpret_cast< std::add_pointer_t<S3>>(_a[1]))); break;
        case 13: _t->s14((*reinterpret_cast< std::add_pointer_t<S1a>>(_a[1]))); break;
        case 14: _t->s15((*reinterpret_cast< std::add_pointer_t<S1*>>(_a[1]))); break;
        case 15: _t->s16((*reinterpret_cast< std::add_pointer_t<S2*>>(_a[1]))); break;
        case 16: _t->s17((*reinterpret_cast< std::add_pointer_t<S3*>>(_a[1]))); break;
        case 17: _t->s18((*reinterpret_cast< std::add_pointer_t<S1a*>>(_a[1]))); break;
        case 18: _t->s19((*reinterpret_cast< std::add_pointer_t<S1&>>(_a[1]))); break;
        case 19: _t->s20((*reinterpret_cast< std::add_pointer_t<S2&>>(_a[1]))); break;
        case 20: _t->s21((*reinterpret_cast< std::add_pointer_t<S3&>>(_a[1]))); break;
        case 21: _t->s22((*reinterpret_cast< std::add_pointer_t<S1a&>>(_a[1]))); break;
        case 22: _t->s23((*reinterpret_cast< std::add_pointer_t<S1>>(_a[1]))); break;
        case 23: _t->s24((*reinterpret_cast< std::add_pointer_t<S2>>(_a[1]))); break;
        case 24: _t->s25((*reinterpret_cast< std::add_pointer_t<S3>>(_a[1]))); break;
        case 25: _t->s26((*reinterpret_cast< std::add_pointer_t<S1a>>(_a[1]))); break;
        case 26: _t->s27((*reinterpret_cast< std::add_pointer_t<const S1*>>(_a[1]))); break;
        case 27: _t->s28((*reinterpret_cast< std::add_pointer_t<const S2*>>(_a[1]))); break;
        case 28: _t->s29((*reinterpret_cast< std::add_pointer_t<const S3*>>(_a[1]))); break;
        case 29: _t->s30((*reinterpret_cast< std::add_pointer_t<const S1a*>>(_a[1]))); break;
        case 30: _t->s31((*reinterpret_cast< std::add_pointer_t<S1>>(_a[1]))); break;
        case 31: _t->s32((*reinterpret_cast< std::add_pointer_t<S1&>>(_a[1]))); break;
        case 32: _t->doubleClicked((*reinterpret_cast< std::add_pointer_t<QModelIndex>>(_a[1]))); break;
        case 33: _t->triggered((*reinterpret_cast< std::add_pointer_t<bool>>(_a[1]))); break;
        case 34: _t->triggered(); break;
        default: ;
        }
    }
    if (_c == QMetaObject::IndexOfMethod) {
        if (QtMocHelpers::indexOfMethod<void (TestTypes::*)(bool )>(_a, &TestTypes::s1, 0))
            return;
        if (QtMocHelpers::indexOfMethod<void (TestTypes::*)(int )>(_a, &TestTypes::s2, 1))
            return;
        if (QtMocHelpers::indexOfMethod<void (TestTypes::*)(int * )>(_a, &TestTypes::s3, 2))
            return;
        if (QtMocHelpers::indexOfMethod<void (TestTypes::*)(bool * )>(_a, &TestTypes::s4, 3))
            return;
        if (QtMocHelpers::indexOfMethod<void (TestTypes::*)(float * )>(_a, &TestTypes::s5, 4))
            return;
        if (QtMocHelpers::indexOfMethod<void (TestTypes::*)(float * )>(_a, &TestTypes::s6, 5))
            return;
        if (QtMocHelpers::indexOfMethod<void (TestTypes::*)(char )>(_a, &TestTypes::s7, 6))
            return;
        if (QtMocHelpers::indexOfMethod<void (TestTypes::*)(char * )>(_a, &TestTypes::s8, 7))
            return;
        if (QtMocHelpers::indexOfMethod<void (TestTypes::*)(float )>(_a, &TestTypes::s9, 8))
            return;
        if (QtMocHelpers::indexOfMethod<void (TestTypes::*)(double )>(_a, &TestTypes::s10, 9))
            return;
        if (QtMocHelpers::indexOfMethod<void (TestTypes::*)(S1 )>(_a, &TestTypes::s11, 10))
            return;
        if (QtMocHelpers::indexOfMethod<void (TestTypes::*)(S2 )>(_a, &TestTypes::s12, 11))
            return;
        if (QtMocHelpers::indexOfMethod<void (TestTypes::*)(S3 )>(_a, &TestTypes::s13, 12))
            return;
        if (QtMocHelpers::indexOfMethod<void (TestTypes::*)(S1a )>(_a, &TestTypes::s14, 13))
            return;
        if (QtMocHelpers::indexOfMethod<void (TestTypes::*)(S1 * )>(_a, &TestTypes::s15, 14))
            return;
        if (QtMocHelpers::indexOfMethod<void (TestTypes::*)(S2 * )>(_a, &TestTypes::s16, 15))
            return;
        if (QtMocHelpers::indexOfMethod<void (TestTypes::*)(S3 * )>(_a, &TestTypes::s17, 16))
            return;
        if (QtMocHelpers::indexOfMethod<void (TestTypes::*)(S1a * )>(_a, &TestTypes::s18, 17))
            return;
        if (QtMocHelpers::indexOfMethod<void (TestTypes::*)(S1 & )>(_a, &TestTypes::s19, 18))
            return;
        if (QtMocHelpers::indexOfMethod<void (TestTypes::*)(S2 & )>(_a, &TestTypes::s20, 19))
            return;
        if (QtMocHelpers::indexOfMethod<void (TestTypes::*)(S3 & )>(_a, &TestTypes::s21, 20))
            return;
        if (QtMocHelpers::indexOfMethod<void (TestTypes::*)(S1a & )>(_a, &TestTypes::s22, 21))
            return;
        if (QtMocHelpers::indexOfMethod<void (TestTypes::*)(const S1 )>(_a, &TestTypes::s23, 22))
            return;
        if (QtMocHelpers::indexOfMethod<void (TestTypes::*)(const S2 )>(_a, &TestTypes::s24, 23))
            return;
        if (QtMocHelpers::indexOfMethod<void (TestTypes::*)(const S3 )>(_a, &TestTypes::s25, 24))
            return;
        if (QtMocHelpers::indexOfMethod<void (TestTypes::*)(const S1a )>(_a, &TestTypes::s26, 25))
            return;
        if (QtMocHelpers::indexOfMethod<void (TestTypes::*)(const S1 * )>(_a, &TestTypes::s27, 26))
            return;
        if (QtMocHelpers::indexOfMethod<void (TestTypes::*)(const S2 * )>(_a, &TestTypes::s28, 27))
            return;
        if (QtMocHelpers::indexOfMethod<void (TestTypes::*)(const S3 * )>(_a, &TestTypes::s29, 28))
            return;
        if (QtMocHelpers::indexOfMethod<void (TestTypes::*)(const S1a * )>(_a, &TestTypes::s30, 29))
            return;
        if (QtMocHelpers::indexOfMethod<void (TestTypes::*)(const S1 & )>(_a, &TestTypes::s31, 30))
            return;
        if (QtMocHelpers::indexOfMethod<void (TestTypes::*)(S1 & )>(_a, &TestTypes::s32, 31))
            return;
        if (QtMocHelpers::indexOfMethod<void (TestTypes::*)(const QModelIndex & )>(_a, &TestTypes::doubleClicked, 32))
            return;
        if (QtMocHelpers::indexOfMethod<void (TestTypes::*)(bool )>(_a, &TestTypes::triggered, 33))
            return;
    }
}

const QMetaObject *TestTypes::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TestTypes::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_staticMetaObjectStaticContent<qt_meta_tag_ZN9TestTypesE_t>.strings))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int TestTypes::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 35)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 35;
    }
    if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 35)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 35;
    }
    return _id;
}

// SIGNAL 0
void TestTypes::s1(bool _t1)
{
    QMetaObject::activate<void>(this, &staticMetaObject, 0, nullptr, _t1);
}

// SIGNAL 1
void TestTypes::s2(int _t1)
{
    QMetaObject::activate<void>(this, &staticMetaObject, 1, nullptr, _t1);
}

// SIGNAL 2
void TestTypes::s3(int * _t1)
{
    QMetaObject::activate<void>(this, &staticMetaObject, 2, nullptr, _t1);
}

// SIGNAL 3
void TestTypes::s4(bool * _t1)
{
    QMetaObject::activate<void>(this, &staticMetaObject, 3, nullptr, _t1);
}

// SIGNAL 4
void TestTypes::s5(float * _t1)
{
    QMetaObject::activate<void>(this, &staticMetaObject, 4, nullptr, _t1);
}

// SIGNAL 5
void TestTypes::s6(float * _t1)
{
    QMetaObject::activate<void>(this, &staticMetaObject, 5, nullptr, _t1);
}

// SIGNAL 6
void TestTypes::s7(char _t1)
{
    QMetaObject::activate<void>(this, &staticMetaObject, 6, nullptr, _t1);
}

// SIGNAL 7
void TestTypes::s8(char * _t1)
{
    QMetaObject::activate<void>(this, &staticMetaObject, 7, nullptr, _t1);
}

// SIGNAL 8
void TestTypes::s9(float _t1)
{
    QMetaObject::activate<void>(this, &staticMetaObject, 8, nullptr, _t1);
}

// SIGNAL 9
void TestTypes::s10(double _t1)
{
    QMetaObject::activate<void>(this, &staticMetaObject, 9, nullptr, _t1);
}

// SIGNAL 10
void TestTypes::s11(S1 _t1)
{
    QMetaObject::activate<void>(this, &staticMetaObject, 10, nullptr, _t1);
}

// SIGNAL 11
void TestTypes::s12(S2 _t1)
{
    QMetaObject::activate<void>(this, &staticMetaObject, 11, nullptr, _t1);
}

// SIGNAL 12
void TestTypes::s13(S3 _t1)
{
    QMetaObject::activate<void>(this, &staticMetaObject, 12, nullptr, _t1);
}

// SIGNAL 13
void TestTypes::s14(S1a _t1)
{
    QMetaObject::activate<void>(this, &staticMetaObject, 13, nullptr, _t1);
}

// SIGNAL 14
void TestTypes::s15(S1 * _t1)
{
    QMetaObject::activate<void>(this, &staticMetaObject, 14, nullptr, _t1);
}

// SIGNAL 15
void TestTypes::s16(S2 * _t1)
{
    QMetaObject::activate<void>(this, &staticMetaObject, 15, nullptr, _t1);
}

// SIGNAL 16
void TestTypes::s17(S3 * _t1)
{
    QMetaObject::activate<void>(this, &staticMetaObject, 16, nullptr, _t1);
}

// SIGNAL 17
void TestTypes::s18(S1a * _t1)
{
    QMetaObject::activate<void>(this, &staticMetaObject, 17, nullptr, _t1);
}

// SIGNAL 18
void TestTypes::s19(S1 & _t1)
{
    QMetaObject::activate<void>(this, &staticMetaObject, 18, nullptr, _t1);
}

// SIGNAL 19
void TestTypes::s20(S2 & _t1)
{
    QMetaObject::activate<void>(this, &staticMetaObject, 19, nullptr, _t1);
}

// SIGNAL 20
void TestTypes::s21(S3 & _t1)
{
    QMetaObject::activate<void>(this, &staticMetaObject, 20, nullptr, _t1);
}

// SIGNAL 21
void TestTypes::s22(S1a & _t1)
{
    QMetaObject::activate<void>(this, &staticMetaObject, 21, nullptr, _t1);
}

// SIGNAL 22
void TestTypes::s23(const S1 _t1)
{
    QMetaObject::activate<void>(this, &staticMetaObject, 22, nullptr, _t1);
}

// SIGNAL 23
void TestTypes::s24(const S2 _t1)
{
    QMetaObject::activate<void>(this, &staticMetaObject, 23, nullptr, _t1);
}

// SIGNAL 24
void TestTypes::s25(const S3 _t1)
{
    QMetaObject::activate<void>(this, &staticMetaObject, 24, nullptr, _t1);
}

// SIGNAL 25
void TestTypes::s26(const S1a _t1)
{
    QMetaObject::activate<void>(this, &staticMetaObject, 25, nullptr, _t1);
}

// SIGNAL 26
void TestTypes::s27(const S1 * _t1)
{
    QMetaObject::activate<void>(this, &staticMetaObject, 26, nullptr, _t1);
}

// SIGNAL 27
void TestTypes::s28(const S2 * _t1)
{
    QMetaObject::activate<void>(this, &staticMetaObject, 27, nullptr, _t1);
}

// SIGNAL 28
void TestTypes::s29(const S3 * _t1)
{
    QMetaObject::activate<void>(this, &staticMetaObject, 28, nullptr, _t1);
}

// SIGNAL 29
void TestTypes::s30(const S1a * _t1)
{
    QMetaObject::activate<void>(this, &staticMetaObject, 29, nullptr, _t1);
}

// SIGNAL 30
void TestTypes::s31(const S1 & _t1)
{
    QMetaObject::activate<void>(this, &staticMetaObject, 30, nullptr, _t1);
}

// SIGNAL 31
void TestTypes::s32(S1 & _t1)
{
    QMetaObject::activate<void>(this, &staticMetaObject, 31, nullptr, _t1);
}

// SIGNAL 32
void TestTypes::doubleClicked(const QModelIndex & _t1)
{
    QMetaObject::activate<void>(this, &staticMetaObject, 32, nullptr, _t1);
}

// SIGNAL 33
void TestTypes::triggered(bool _t1)
{
    QMetaObject::activate<void>(this, &staticMetaObject, 33, nullptr, _t1);
}
namespace {
struct qt_meta_tag_ZN4Kleo14ProgressDialogE_t {};
} // unnamed namespace

template <> constexpr inline auto Kleo::ProgressDialog::qt_create_metaobjectdata<qt_meta_tag_ZN4Kleo14ProgressDialogE_t>()
{
    namespace QMC = QtMocConstants;
    QtMocHelpers::StringRefStorage qt_stringData {
        "Kleo::ProgressDialog"
    };

    QtMocHelpers::UintData qt_methods {
    };
    QtMocHelpers::UintData qt_properties {
    };
    QtMocHelpers::UintData qt_enums {
    };
    return QtMocHelpers::metaObjectData<ProgressDialog, qt_meta_tag_ZN4Kleo14ProgressDialogE_t>(QMC::MetaObjectFlag{}, qt_stringData,
            qt_methods, qt_properties, qt_enums);
}
Q_CONSTINIT const QMetaObject Kleo::ProgressDialog::staticMetaObject = { {
    QMetaObject::SuperData::link<QProgressDialog::staticMetaObject>(),
    qt_staticMetaObjectStaticContent<qt_meta_tag_ZN4Kleo14ProgressDialogE_t>.stringdata,
    qt_staticMetaObjectStaticContent<qt_meta_tag_ZN4Kleo14ProgressDialogE_t>.data,
    qt_static_metacall,
    nullptr,
    qt_staticMetaObjectRelocatingContent<qt_meta_tag_ZN4Kleo14ProgressDialogE_t>.metaTypes,
    nullptr
} };

void Kleo::ProgressDialog::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    auto *_t = static_cast<ProgressDialog *>(_o);
    (void)_t;
    (void)_c;
    (void)_id;
    (void)_a;
}

const QMetaObject *Kleo::ProgressDialog::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *Kleo::ProgressDialog::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_staticMetaObjectStaticContent<qt_meta_tag_ZN4Kleo14ProgressDialogE_t>.strings))
        return static_cast<void*>(this);
    return QProgressDialog::qt_metacast(_clname);
}

int Kleo::ProgressDialog::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QProgressDialog::qt_metacall(_c, _id, _a);
    return _id;
}
namespace {
struct qt_meta_tag_ZN18TestQPointerMemberE_t {};
} // unnamed namespace

template <> constexpr inline auto TestQPointerMember::qt_create_metaobjectdata<qt_meta_tag_ZN18TestQPointerMemberE_t>()
{
    namespace QMC = QtMocConstants;
    QtMocHelpers::StringRefStorage qt_stringData {
        "TestQPointerMember",
        "slot1",
        ""
    };

    QtMocHelpers::UintData qt_methods {
        // Slot 'slot1'
        QtMocHelpers::SlotData<void()>(1, 2, QMC::AccessPublic, QMetaType::Void),
    };
    QtMocHelpers::UintData qt_properties {
    };
    QtMocHelpers::UintData qt_enums {
    };
    return QtMocHelpers::metaObjectData<TestQPointerMember, qt_meta_tag_ZN18TestQPointerMemberE_t>(QMC::MetaObjectFlag{}, qt_stringData,
            qt_methods, qt_properties, qt_enums);
}
Q_CONSTINIT const QMetaObject TestQPointerMember::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_staticMetaObjectStaticContent<qt_meta_tag_ZN18TestQPointerMemberE_t>.stringdata,
    qt_staticMetaObjectStaticContent<qt_meta_tag_ZN18TestQPointerMemberE_t>.data,
    qt_static_metacall,
    nullptr,
    qt_staticMetaObjectRelocatingContent<qt_meta_tag_ZN18TestQPointerMemberE_t>.metaTypes,
    nullptr
} };

void TestQPointerMember::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    auto *_t = static_cast<TestQPointerMember *>(_o);
    if (_c == QMetaObject::InvokeMetaMethod) {
        switch (_id) {
        case 0: _t->slot1(); break;
        default: ;
        }
    }
    (void)_a;
}

const QMetaObject *TestQPointerMember::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TestQPointerMember::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_staticMetaObjectStaticContent<qt_meta_tag_ZN18TestQPointerMemberE_t>.strings))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int TestQPointerMember::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 1)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 1;
    }
    if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 1)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 1;
    }
    return _id;
}
namespace {
struct qt_meta_tag_ZN10TestStaticE_t {};
} // unnamed namespace

template <> constexpr inline auto TestStatic::qt_create_metaobjectdata<qt_meta_tag_ZN10TestStaticE_t>()
{
    namespace QMC = QtMocConstants;
    QtMocHelpers::StringRefStorage qt_stringData {
        "TestStatic",
        "test",
        ""
    };

    QtMocHelpers::UintData qt_methods {
        // Slot 'test'
        QtMocHelpers::SlotData<void(QObject *)>(1, 2, QMC::AccessPublic, QMetaType::Void, {{
            { QMetaType::QObjectStar, 2 },
        }}),
    };
    QtMocHelpers::UintData qt_properties {
    };
    QtMocHelpers::UintData qt_enums {
    };
    return QtMocHelpers::metaObjectData<TestStatic, qt_meta_tag_ZN10TestStaticE_t>(QMC::MetaObjectFlag{}, qt_stringData,
            qt_methods, qt_properties, qt_enums);
}
Q_CONSTINIT const QMetaObject TestStatic::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_staticMetaObjectStaticContent<qt_meta_tag_ZN10TestStaticE_t>.stringdata,
    qt_staticMetaObjectStaticContent<qt_meta_tag_ZN10TestStaticE_t>.data,
    qt_static_metacall,
    nullptr,
    qt_staticMetaObjectRelocatingContent<qt_meta_tag_ZN10TestStaticE_t>.metaTypes,
    nullptr
} };

void TestStatic::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    auto *_t = static_cast<TestStatic *>(_o);
    if (_c == QMetaObject::InvokeMetaMethod) {
        switch (_id) {
        case 0: _t->test((*reinterpret_cast< std::add_pointer_t<QObject*>>(_a[1]))); break;
        default: ;
        }
    }
}

const QMetaObject *TestStatic::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TestStatic::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_staticMetaObjectStaticContent<qt_meta_tag_ZN10TestStaticE_t>.strings))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int TestStatic::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 1)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 1;
    }
    if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 1)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 1;
    }
    return _id;
}
QT_WARNING_POP
